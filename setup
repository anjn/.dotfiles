#!/usr/bin/env bash
# This script was generated by bashly (https://github.com/DannyBen/bashly)
# Modifying it manually is not recommended

# :command.root_command
root_command() {
  # :src/root_command.sh
  inspect_args
  
  # Update
  sudo apt update
  sudo apt upgrade -y
  
  # Disable capslock
  sudo sed -i 's/\(XKBOPTIONS\).*/\1="ctrl:nocaps"/' /etc/default/keyboard
  
  # Git
  apt_install git curl
  
  # .dotfiles
  if [[ ! -e ~/.dotfiles ]] ; then
    pushd ~
    git clone https://github.com/anjn/.dotfiles.git
    popd
  fi
  
  # python
  apt_install python3-pip
  pip3 install neovim
  
  # Neovim
  apt_install software-properties-common xsel
  if not_installed neovim ; then
    sudo add-apt-repository -y ppa:neovim-ppa/unstable
    sudo apt-get update
    sudo apt-get install -y neovim
  fi
  link_file .config/nvim
  if [[ ! -e ~/.cache/dein ]] ; then
    curl https://raw.githubusercontent.com/Shougo/dein.vim/master/bin/installer.sh > installer.sh
    sh ./installer.sh ~/.cache/dein
  fi
  
  sudo update-alternatives --set editor /usr/bin/nvim || true
  sudo apt purge -y nano || true
  
  # Fonts
  if [[ ! -e ~/.fonts/Cica-Regular.ttf ]] ; then
    wget https://github.com/miiton/Cica/releases/download/v5.0.2/Cica_v5.0.2_with_emoji.zip
    unzip Cica_*.zip
    mkdir -p ~/.fonts  
    mv Cica-*.ttf $HOME/.fonts
    sudo fc-cache -fv  
  fi
  
  # tmux
  apt_install tmux
  link_file .tmux.conf
  
  # peco
  if [[ ! -e $HOME/bin/peco ]] ; then
    wget https://github.com/peco/peco/releases/download/v0.5.7/peco_linux_amd64.tar.gz
    tar xf peco_linux_amd64.tar.gz
    mkdir -p $HOME/bin
    cp peco_linux_amd64/peco $HOME/bin
  fi
  link_file .config/peco
  
  # IME
  apt_install fcitx-mozc
  # Restart, Add 'Mozc' to input method list
  
  # enhancd
  if [ ! -e ~/.cache/enhancd ] ; then
    pushd ~/.cache
    git clone https://github.com/b4b4r07/enhancd
    popd
  fi
  append_if_not_included $HOME/.bash_profile "source ~/.cache/enhancd/init.sh"
  
  ## Regolith Linux
  if not_installed regolith-desktop-standard ; then
    sudo add-apt-repository -y ppa:regolith-linux/release
    sudo apt update
    sudo apt install -y regolith-desktop-standard
  
    # Replace backend: https://github.com/chjj/compton/issues/152
    #sudo sed -i 's/backend = "glx"/backend = "xrender"/' /etc/regolith/compton/config
  
    apt_install i3xrocks-battery
  
    mkdir -p ~/.config/regolith
    link_file .config/regolith/Xresources
  fi
  
  # Google Chrome
  if not_installed google-chrome-stable ; then
    wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
    sudo apt install -y ./google-chrome-stable_current_amd64.deb
  fi
  
  #apt_install gnome-icon-theme
  apt_install tree
  apt_install build-essential valgrind
  apt_install htop keepass2 fio hddtemp smartmontools
  apt_install ruby ethtool
  
  # # Google drive
  # if not_installed google-drive-ocamlfuse ; then
  #   sudo add-apt-repository -y ppa:alessandro-strada/ppa
  #   sudo apt update
  #   sudo apt install -y google-drive-ocamlfuse
  # fi
  # 
  # if [[ ! -e ~/GoogleDrive ]] ; then
  #   google-drive-ocamlfuse
  #   mkdir ~/GoogleDrive
  # fi
  
  # Linuxbrew
  #if not_installed linuxbrew-wrapper ; then
  #  sudo apt install -y linuxbrew-wrapper
  #  brew
  #  append_if_not_included $HOME/.bash_profile 'export PATH="/home/linuxbrew/.linuxbrew/bin:$PATH"'
  #  append_if_not_included $HOME/.bash_profile 'export MANPATH="/home/linuxbrew/.linuxbrew/share/man:$MANPATH"'
  #  append_if_not_included $HOME/.bash_profile 'export INFOPATH="/home/linuxbrew/.linuxbrew/share/info:$INFOPATH"'
  #fi
  
  #if not_installed steam-launcher ; then
  #  wget https://repo.steampowered.com/steam/archive/precise/steam_latest.deb
  #  sudo apt install -y ./steam_latest.deb
  #fi
  
  # imwheel
  #apt_install imwheel
  #link_file .imwheelrc
  #link_file .config/autostart/imwheel.desktop
  
  # # git config --global user.name ""
  # # git config --global user.email 
  if [ ! -e $HOME/.gitconfig ] ; then
    wget https://gist.githubusercontent.com/anjn/650e64455b3d20bbf0d9e96138a4d000/raw/2e4817e53954954bf80bf1ebf7f99e2cb232fe18/.gitconfg
    cp .gitconfg $HOME/.gitconfig
  fi
  
  # bashrc
  append_if_not_included $HOME/.bashrc "source $dothome/.bashrc"
  
  # Vitis
  apt_install opencl-headers
  
  # nodejs
  if ! which n ; then
    apt_install nodejs npm
    sudo npm install -g n
  fi
  sudo n lts
  sudo apt purge -y nodejs npm || true
  sudo apt autoremove -y
}

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
setup_usage() {
  if [[ -n $long_usage ]]; then
    printf "setup - Setup env\n"
    echo 
  else
    printf "setup - Setup env\n"
    echo 
  fi

  printf "Usage:\n"
  printf "  setup\n"
  printf "  setup --help | -h\n"
  printf "  setup --version | -v\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    
    printf "  setup\n"
    echo

  fi
}

# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if (( ${#args[@]} )); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if (( ${#other_args[@]} )); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.user_lib
# :src/lib/yaml.sh
# ---
# YAML parser
# This file is a part of Bashly standard library
# Does not support arrays, only hashes
#
# Source: https://stackoverflow.com/a/21189044/413924
#
# Usage:
#
#   yaml_load "settings.yml"             # print variables
#   yaml_load "settings.yml" "config_"   # use prefix
#   eval $(yaml_load "settings.yml")     # create variables in scope
#
# ---

yaml_load() {
   local prefix=$2
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*'
   local fs

   fs=$(echo @|tr @ '\034')

   sed -ne "s|^\($s\):|\1|" \
        -e "s|^\($s\)\($w\)$s:${s}[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  "$1" |
   awk -F"$fs" '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'"$prefix"'",vn, $2, $3);
      }
   }'
}

# :src/lib/common.sh
dir=$(dirname $(readlink -f $0))
dothome=$dir/home

# Create tmp directory
tmp=$(mktemp -d)
function rm_tmp {
  [[ -e "$tmp" ]] && rm -rf "$tmp"
}
trap rm_tmp EXIT
trap 'trap - EXIT; rm_tmp; exit -1' INT PIPE TERM
cd $tmp

# List installed packages
installed=$tmp/installed
apt list --installed > $installed

# Utilities
function not_installed {
  ! grep -e "^$1/" $installed > /dev/null
}
function apt_install {
  for arg; do
    if not_installed $arg ; then
      echo Install: $arg
      sudo DEBIAN_FRONTEND=noninteractive apt install -y $arg > /dev/null
    fi
  done
}
function link_file {
  for src; do
    local srcdir=$(dirname $src)
    local src=$dothome/$src
    local dst=$HOME/$srcdir
    if [[ -d "$dst" ]] ; then
      dst="$dst/$(basename $src)"
    fi
    if [[ ! -e "$dst" ]] ; then
      echo Create link: $dst
      rm -f "$dst"
      ln -s "$src" "$dst"
    fi
  done
}
function not_included {
  ! grep "$2" "$1" > /dev/null
}
function append_string {
  local file="$1"
  local code="$2"
  echo Append: $file
  echo "$code" >> "$file"
}
function append_if_not_included {
  local file="$1"
  local code="$2"
  if not_included "$file" "$code" ; then
    append_string "$file" "$code"
  fi
}

# :src/lib/colors.sh
# ---
# Color functions
# This file is a part of Bashly standard library
#
# Usage:
# Use any of the functions below to color or format a portion of a string.
# 
#   echo "before $(red this is red) after"
#   echo "before $(green_bold this is green_bold) after"
#
# ---

red() { printf "\e[31m%b\e[0m\n" "$*"; }
green() { printf "\e[32m%b\e[0m\n" "$*"; }
yellow() { printf "\e[33m%b\e[0m\n" "$*"; }
blue() { printf "\e[34m%b\e[0m\n" "$*"; }
magenta() { printf "\e[35m%b\e[0m\n" "$*"; }
cyan() { printf "\e[36m%b\e[0m\n" "$*"; }
bold() { printf "\e[1m%b\e[0m\n" "$*"; }
underlined() { printf "\e[4m%b\e[0m\n" "$*"; }
red_bold() { printf "\e[1;31m%b\e[0m\n" "$*"; }
green_bold() { printf "\e[1;32m%b\e[0m\n" "$*"; }
yellow_bold() { printf "\e[1;33m%b\e[0m\n" "$*"; }
blue_bold() { printf "\e[1;34m%b\e[0m\n" "$*"; }
magenta_bold() { printf "\e[1;35m%b\e[0m\n" "$*"; }
cyan_bold() { printf "\e[1;36m%b\e[0m\n" "$*"; }
red_underlined() { printf "\e[4;31m%b\e[0m\n" "$*"; }
green_underlined() { printf "\e[4;32m%b\e[0m\n" "$*"; }
yellow_underlined() { printf "\e[4;33m%b\e[0m\n" "$*"; }
blue_underlined() { printf "\e[4;34m%b\e[0m\n" "$*"; }
magenta_underlined() { printf "\e[4;35m%b\e[0m\n" "$*"; }
cyan_underlined() { printf "\e[4;36m%b\e[0m\n" "$*"; }

# :command.command_functions

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    setup_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="root"
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
  # :command.default_assignments
  # :command.whitelist_filter
}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e  

  # :src/initialize.sh
  # Code here runs inside the initialize() function
  # Use it for anything that you need to run before any other function, like
  # setting environment vairables:
  # CONFIG_FILE=settings.ini
  #
  # Feel free to empty (but not delete) this file.
}

# :command.run
run() {
  declare -A args
  declare -a other_args
  parse_requirements "$@"

  if [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
